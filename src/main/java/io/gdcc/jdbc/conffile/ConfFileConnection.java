package io.gdcc.jdbc.conffile;

import java.nio.file.Path;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

public class ConfFileConnection implements Connection {
    
    private final Path directory;
    private final String adapter;
    private final List<SQLWarning> warnings = new ArrayList<>();
    
    ConfFileConnection(Path directory, String adapter) {
        this.directory = directory;
        this.adapter = adapter;
    }
    
    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        if (sql == null || sql.isBlank()) {
            throw new SQLException("SQL statement cannot be null or empty");
        }
        return new ConfFilePreparedStatement(this.directory, this.adapter, sql);
    }
    
    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return prepareStatement(sql);
    }
    
    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return prepareStatement(sql);
    }
    
    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public Statement createStatement() throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public String nativeSQL(String sql) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public void setAutoCommit(boolean autoCommit) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public boolean getAutoCommit() throws SQLException {
        return false;
    }
    
    @Override
    public void commit() throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public void rollback() throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public void close() throws SQLException {
        // Intentionally left blank - there is nothing we can close here
    }
    
    @Override
    public boolean isClosed() throws SQLException {
        return false;
    }
    
    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public void setReadOnly(boolean readOnly) throws SQLException {
        // Intentionally left blank - we cannot switch to readwrite mode, this is a readonly driver
    }
    
    @Override
    public boolean isReadOnly() throws SQLException {
        return true;
    }
    
    @Override
    public void setCatalog(String catalog) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public String getCatalog() throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public void setTransactionIsolation(int level) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public int getTransactionIsolation() throws SQLException {
        return Connection.TRANSACTION_NONE;
    }
    
    @Override
    public SQLWarning getWarnings() throws SQLException {
        /*
        Retrieves the first warning reported by calls on this Connection object.
        If there is more than one warning, subsequent warnings will be chained to the first one and can be retrieved by calling the method SQLWarning. getNextWarning on the warning that was retrieved previously.
        This method may not be called on a closed connection; doing so will cause an SQLException to be thrown.
        */
        if (this.isClosed()) {
            throw new SQLException("The connection is closed.");
        }
        
        if (!warnings.isEmpty()) {
            SQLWarning first = warnings.get(0);
            SQLWarning head = warnings.get(0);
            if (warnings.size() > 1) {
                for (SQLWarning warning : warnings.subList(1, warnings.size()-1)) {
                    head.setNextWarning(warning);
                    head = warning;
                }
            }
            return first;
        } else {
            return null;
        }
    }
    
    @Override
    public void clearWarnings() throws SQLException {
        warnings.clear();
    }
    
    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public Map<String, Class<?>> getTypeMap() throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public void setHoldability(int holdability) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public int getHoldability() throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public Savepoint setSavepoint() throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public Savepoint setSavepoint(String name) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public void rollback(Savepoint savepoint) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public Clob createClob() throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public Blob createBlob() throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public NClob createNClob() throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public SQLXML createSQLXML() throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public boolean isValid(int timeout) throws SQLException {
        return true;
    }
    
    @Override
    public void setClientInfo(String name, String value) throws SQLClientInfoException {
        // Intentionally left blank
    }
    
    @Override
    public void setClientInfo(Properties properties) throws SQLClientInfoException {
        // Intentionally left blank
    }
    
    @Override
    public String getClientInfo(String name) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public Properties getClientInfo() throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public void setSchema(String schema) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public String getSchema() throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public void abort(Executor executor) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public int getNetworkTimeout() throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
    
    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        throw new SQLFeatureNotSupportedException("This method is not supported");
    }
}
